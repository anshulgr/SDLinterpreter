module Shapes.Cylinder where

import Text.ParserCombinators.Parsec
import Data.Char
import Graphics.UI.GLUT
import Graphics.Rendering.OpenGL
import Shapes.Polygon
import Appearence.Color
import Appearence.Translate
import Appearence.Rotate
import Appearence.Scale
import Data.List
import Appearence.Camera

returnArgsCy 0 _ = []
returnArgsCy a [] = []
returnArgsCy a (x:xs) = (returnArgCy x):(returnArgsCy (a-1) xs)

-- | Separates x,y,z co-ordinates from parameters
returnArgCy [] = (0.0,0.0,0.0)
returnArgCy (x:xs) = if x== '<'
                         then let (y1,z1) = (myFunc xs)
                                  (y2,z2 )= (myFunc z1)
                                  (y3,z3 )= (myFunc z2)
                                         in ((read y1) , (read y2) , (-(read y3))) 
                         else returnArgCy xs

-- | Obtains parameters of cylinder             
cylinderFound::[String] -> IO ()
cylinderFound (x:xs) = let myPoints = (returnArgsCy 2 (x:xs))
                           rad      =  read (eatSpaces (head (tail xs)))
					                   in  parseRCy xs myPoints rad (calcHeight myPoints)



-- | Calculates height of the cylinder
calcHeight [(x1,y1,z1),(x2,y2,z2)]= sqrt (((x1-x2)*(x1-x2))+((y1-y2)*(y1-y2))+((z1-z2)*(z1-z2)))


-- | Obtains attributes of the cylinder
parseRCy [] myPoints r h= do currentColor $= Color4 1 0 0 0
                             hOpenGlCylinder myPoints r h
                             
parseRCy (xs:xss) myPoints r h          |(isInfixOf "color rgb" xs ) = do
                                                                        let interm= snd(splitAt (head(elemIndices '<' xs)) xs)
                                                                        do
                                                                         setColorRGB (fst (splitAt (head(elemIndices '>' xs)) interm))
                                                                         parseRCy xss myPoints r h
                                        |(isInfixOf "translate" xs ) = do
                                                                        let interm= snd(splitAt (head(elemIndices '<' xs)) xs)
                                                                        do
                                                                         translateImage (fst (splitAt (head(elemIndices '>' xs)) interm))
                                                                         parseRCy xss myPoints r h
                                        |(isInfixOf "rotate" xs )    = do
                                                                        let interm= snd(splitAt (head(elemIndices '<' xs)) xs)
                                                                        do
                                                                         rotateImage (fst (splitAt (head(elemIndices '>' xs)) interm))
                                                                         parseRCy xss myPoints r h
                                        |(isInfixOf "scale" xs )    = do
                                                                        let interm= snd(splitAt (head(elemIndices '<' xs)) xs)
                                                                        do
                                                                         scaleImage1 (fst (splitAt (head(elemIndices '>' xs)) interm))
                                                                         parseRCy xss myPoints r h
                                        |otherwise                  =  parseRCy xss myPoints r h
                                 

-- | Renders HOpenGL cylinder with obtained parameters
hOpenGlCylinder myPoints rad h= renderObject Solid (Cylinder' rad h 1000 1000)

